/*미로 탈출
N*M 크기의 직사각형 형태의 미로에 갇혀 있다. 미로에는 여러 마리의 괴물이 있어 이를 피해 탈출해야 한다.
주인공의 위치는 (1,1)이고 출구는(N,M)의 위치에 존재하며 한번에 한 칸씩 이동할 수 있다.
이 때 괴물이 있는 부분은 0으로, 괴물이 없는 부분은 1로 표시되어 있다.
이 때 주인공이 탈출하기 위해 움직여야 하는 최소 칸의 개수를 구하시오.
첫째 줄에 두 정수 N,M(4<=N,M<=200)이 주어집니다. 다음 N개의 줄엥는 각각 M개의 정수(0,1)로 미로의 정보가 주어진다.
각각의 수들은 공백 없이 붙어서 입력으로 제시된다. 또한 시작 칸과 마지막 칸은 항상 1이다.
 */
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

#define MAX 200
int graph[MAX][MAX];
int sum[MAX][MAX] = {0};
bool visited[MAX][MAX];
int n, m;
int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};

void bfs(int x, int y)
{
  queue<pair<int, int>> q;
  q.push(make_pair(x, y));
  visited[x][y] = true;
  sum[x][y] = 1;
  while (!q.empty())
  {
    int nx = q.front().first;
    int ny = q.front().second;
    q.pop();
    for (int i = 0; i < 4; i++)
    {
      int next_x = nx + dx[i];
      int next_y = ny + dy[i];
      if (next_x >= 1 && next_x <= n && next_y >= 1 && next_y <= m)
      {
        if (graph[next_x][next_y] == 1 && visited[next_x][next_y] == false)
        {
          q.push(make_pair(next_x, next_y));
          visited[next_x][next_y] = true;
          sum[next_x][next_y] = sum[nx][ny] + 1;
        }
      }
    }
  }
  cout << sum[n][m] << endl;
}

int main()
{
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  cin >> n >> m;
  for (int i = 1; i <= n; i++)
  {
    for (int j = 1; j <= m; j++)
    {
      scanf("%1d", &graph[i][j]);
    }
  }

  bfs(1, 1);
}

