#include <iostream>
#include <vector>
#include<queue>
#include<iostream>
using namespace std;

vector<pair<int, int>> graph[10001];
int dis[10001];
int n, m, start;

void dijkstra(int start){
  priority_queue<pair<int,int>>pq;
  pq.push({0,start});
  dis[start]=0;
  while(!pq.empty()){
    int dist = -pq.top().first;
    int now =pq.top().second;
    pq.pop();

    if(dis[now]<dist) continue;

    for(int i =0; i<graph[now].size(); i++){
      int cost = dist + graph[now][i].second;

      if(cost<dis[graph[now][i].first]){
        dis[graph[now][i].first]=cost;
        pq.push({-cost,graph[now][i].first});
      }
    }
  }
}


int main()
{
  cin >> n >> m >> start;

  for (int i = 0; i < m; i++)
  {
    int a, b, num;
    cin >> a >> b >> num;
    graph[a].push_back({b, num});
  }
  fill_n(dis, 10001, INT_MAX);
  dijkstra(start);

  for (int i = 1; i <= n; i++)
  {
    if (dis[i] == INT_MAX)
      cout << "도달 불가" << '\n';
    else
      cout << dis[i] << '\n';
  }
}
